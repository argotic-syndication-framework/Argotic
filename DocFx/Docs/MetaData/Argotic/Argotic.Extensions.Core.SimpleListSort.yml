### YamlMime:ManagedReference
items:
- uid: Argotic.Extensions.Core.SimpleListSort
  commentId: T:Argotic.Extensions.Core.SimpleListSort
  id: SimpleListSort
  parent: Argotic.Extensions.Core
  children:
  - Argotic.Extensions.Core.SimpleListSort.#ctor
  - Argotic.Extensions.Core.SimpleListSort.CompareTo(System.Object)
  - Argotic.Extensions.Core.SimpleListSort.DataType
  - Argotic.Extensions.Core.SimpleListSort.DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
  - Argotic.Extensions.Core.SimpleListSort.DataTypeByName(System.String)
  - Argotic.Extensions.Core.SimpleListSort.Element
  - Argotic.Extensions.Core.SimpleListSort.Equals(System.Object)
  - Argotic.Extensions.Core.SimpleListSort.GetHashCode
  - Argotic.Extensions.Core.SimpleListSort.IsDefault
  - Argotic.Extensions.Core.SimpleListSort.Label
  - Argotic.Extensions.Core.SimpleListSort.Load(System.Xml.XPath.XPathNavigator)
  - Argotic.Extensions.Core.SimpleListSort.Namespace
  - Argotic.Extensions.Core.SimpleListSort.op_Equality(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  - Argotic.Extensions.Core.SimpleListSort.op_GreaterThan(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  - Argotic.Extensions.Core.SimpleListSort.op_Inequality(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  - Argotic.Extensions.Core.SimpleListSort.op_LessThan(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  - Argotic.Extensions.Core.SimpleListSort.ToString
  - Argotic.Extensions.Core.SimpleListSort.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: SimpleListSort
  nameWithType: SimpleListSort
  fullName: Argotic.Extensions.Core.SimpleListSort
  type: Class
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: SimpleListSort
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 24
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nRepresents information that enables the publisher to indicate to the client that the property to which it refers is one that is <em>sortable</em>,\nmeaning that the client should provide a user interface that allows the user to sort on that property.\n"
  remarks: "\n<p>\n    This informational entity makes reference to XML elements that are child-elements within the items of the same feed, using the supported extension mechanism of the feed format.\n    This entity can also be used to provide a label for the default sort that appears in the list.\n</p>\n<p>\n    The value which is to be sorted <strong>must be</strong> the text content of the element itself (i.e. the character data contained in the element).\n    Values of attributes or nested elements <strong>cannot</strong> be used for sorting. The property referred to must have no child-elements.\n    In general, only one instance of a property should appear in each item. Clients are free to ignore repeated instances of properties.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class SimpleListSort : IComparable
    content.vb: >-
      <Serializable>

      Public Class SimpleListSort

          Implements IComparable
  seealso:
  - linkId: Argotic.Extensions.Core.SimpleListSyndicationExtensionContext.Sorting
    commentId: P:Argotic.Extensions.Core.SimpleListSyndicationExtensionContext.Sorting
  inheritance:
  - System.Object
  implements:
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Argotic.Extensions.Core.SimpleListSort.#ctor
  commentId: M:Argotic.Extensions.Core.SimpleListSort.#ctor
  id: '#ctor'
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: SimpleListSort()
  nameWithType: SimpleListSort.SimpleListSort()
  fullName: Argotic.Extensions.Core.SimpleListSort.SimpleListSort()
  type: Constructor
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: .ctor
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 55
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nInitializes a new instance of the <xref href=\"Argotic.Extensions.Core.SimpleListSort\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public SimpleListSort()
    content.vb: Public Sub New
  overload: Argotic.Extensions.Core.SimpleListSort.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.DataType
  commentId: P:Argotic.Extensions.Core.SimpleListSort.DataType
  id: DataType
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: DataType
  nameWithType: SimpleListSort.DataType
  fullName: Argotic.Extensions.Core.SimpleListSort.DataType
  type: Property
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: DataType
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 68
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nGets or sets the data-type of this sortable property.\n"
  remarks: "\nIf the value of this property is <xref href=\"Argotic.Extensions.Core.SimpleListDataType.None\" data-throw-if-not-resolved=\"false\"></xref>, it <em>should</em> be assumed default data-type of this sortable property is <xref href=\"Argotic.Extensions.Core.SimpleListDataType.Text\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public SimpleListDataType DataType { get; set; }
    parameters: []
    return:
      type: Argotic.Extensions.Core.SimpleListDataType
      description: A <xref href="Argotic.Extensions.Core.SimpleListDataType" data-throw-if-not-resolved="false"></xref> enumeration value that represents the data-type of this sortable property. The default value is <xref href="Argotic.Extensions.Core.SimpleListDataType.None" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Property DataType As SimpleListDataType
  overload: Argotic.Extensions.Core.SimpleListSort.DataType*
  seealso:
  - linkId: Argotic.Extensions.Core.SimpleListSort.DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
    commentId: M:Argotic.Extensions.Core.SimpleListSort.DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
  - linkId: Argotic.Extensions.Core.SimpleListSort.DataTypeByName(System.String)
    commentId: M:Argotic.Extensions.Core.SimpleListSort.DataTypeByName(System.String)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.Element
  commentId: P:Argotic.Extensions.Core.SimpleListSort.Element
  id: Element
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: Element
  nameWithType: SimpleListSort.Element
  fullName: Argotic.Extensions.Core.SimpleListSort.Element
  type: Property
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: Element
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 89
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nGets or sets get or sets the name of this sortable property.\n"
  remarks: "\nIf this property is equal to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, it is assumed that the <xref href=\"Argotic.Extensions.Core.SimpleListSort.Label\" data-throw-if-not-resolved=\"false\"></xref> property is included\nand that this <xref href=\"Argotic.Extensions.Core.SimpleListSort\" data-throw-if-not-resolved=\"false\"></xref> refers to the default sort order.\n"
  example: []
  syntax:
    content: public string Element { get; set; }
    parameters: []
    return:
      type: System.String
      description: The name of this sortable property. The default value is <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Property Element As String
  overload: Argotic.Extensions.Core.SimpleListSort.Element*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.IsDefault
  commentId: P:Argotic.Extensions.Core.SimpleListSort.IsDefault
  id: IsDefault
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: IsDefault
  nameWithType: SimpleListSort.IsDefault
  fullName: Argotic.Extensions.Core.SimpleListSort.IsDefault
  type: Property
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: IsDefault
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 117
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nGets or sets a value indicating whether gets or sets a value indicating if this sortable property is the default sort order in the list.\n"
  remarks: "\nThe items in the list <strong>must</strong> be already be sorted by the element, meaning the client <strong>should not</strong> expect to have to resort by this field if it displaying content directly from the list.\nThe client <em>should</em> respect only the first <xref href=\"Argotic.Extensions.Core.SimpleListSort\" data-throw-if-not-resolved=\"false\"></xref> that has a <xref href=\"Argotic.Extensions.Core.SimpleListSort.IsDefault\" data-throw-if-not-resolved=\"false\"></xref> property with a value of <strong>true</strong> that it encounters.\n"
  example: []
  syntax:
    content: public bool IsDefault { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: <strong>true</strong> if this sortable property is the default sort order in the list; otherwise <strong>false</strong>. The default value is <strong>false</strong>.
    content.vb: Public Property IsDefault As Boolean
  overload: Argotic.Extensions.Core.SimpleListSort.IsDefault*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.Label
  commentId: P:Argotic.Extensions.Core.SimpleListSort.Label
  id: Label
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: Label
  nameWithType: SimpleListSort.Label
  fullName: Argotic.Extensions.Core.SimpleListSort.Label
  type: Property
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: Label
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 140
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nGets or sets get or sets a human-readable name for this sortable property.\n"
  remarks: "\n<p>\n    If this property is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the client should use the value of the <xref href=\"Argotic.Extensions.Core.SimpleListSort.Element\" data-throw-if-not-resolved=\"false\"></xref> property as the human-readable name.\n</p>\n<p>The <xref href=\"Argotic.Extensions.Core.SimpleListSort.Label\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>required</strong> if the <xref href=\"Argotic.Extensions.Core.SimpleListSort.Element\" data-throw-if-not-resolved=\"false\"></xref> property is an <em>empty string</em>.</p>\n"
  example: []
  syntax:
    content: public string Label { get; set; }
    parameters: []
    return:
      type: System.String
      description: A human-readable name for this sortable property. The default value is <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Property Label As String
  overload: Argotic.Extensions.Core.SimpleListSort.Label*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.Namespace
  commentId: P:Argotic.Extensions.Core.SimpleListSort.Namespace
  id: Namespace
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: SimpleListSort.Namespace
  fullName: Argotic.Extensions.Core.SimpleListSort.Namespace
  type: Property
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: Namespace
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 167
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nGets or sets the full namespace identifier used to qualify this <xref href=\"Argotic.Extensions.Core.SimpleListSort.Element\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nIf the value of this property is <strong>null</strong>, it is assumed that the <xref href=\"Argotic.Extensions.Core.SimpleListSort.Element\" data-throw-if-not-resolved=\"false\"></xref> does not live in a namespace.\n"
  example: []
  syntax:
    content: public Uri Namespace { get; set; }
    parameters: []
    return:
      type: System.Uri
      description: A <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> that represents the full namespace identifier used to qualify this <xref href="Argotic.Extensions.Core.SimpleListSort.Element" data-throw-if-not-resolved="false"></xref> property. The default value is <strong>null</strong>.
    content.vb: Public Property Namespace As Uri
  overload: Argotic.Extensions.Core.SimpleListSort.Namespace*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.op_Equality(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.op_Equality(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  id: op_Equality(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: Equality(SimpleListSort, SimpleListSort)
  nameWithType: SimpleListSort.Equality(SimpleListSort, SimpleListSort)
  fullName: Argotic.Extensions.Core.SimpleListSort.Equality(Argotic.Extensions.Core.SimpleListSort, Argotic.Extensions.Core.SimpleListSort)
  type: Operator
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: op_Equality
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 186
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nDetermines if operands are equal.\n"
  example: []
  syntax:
    content: public static bool operator ==(SimpleListSort first, SimpleListSort second)
    parameters:
    - id: first
      type: Argotic.Extensions.Core.SimpleListSort
      description: Operand to be compared.
    - id: second
      type: Argotic.Extensions.Core.SimpleListSort
      description: Operand to compare to.
    return:
      type: System.Boolean
      description: <strong>true</strong> if the values of its operands are equal, otherwise; <strong>false</strong>.
    content.vb: Public Shared Operator =(first As SimpleListSort, second As SimpleListSort) As Boolean
  overload: Argotic.Extensions.Core.SimpleListSort.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Argotic.Extensions.Core.SimpleListSort.op_Inequality(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.op_Inequality(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  id: op_Inequality(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: Inequality(SimpleListSort, SimpleListSort)
  nameWithType: SimpleListSort.Inequality(SimpleListSort, SimpleListSort)
  fullName: Argotic.Extensions.Core.SimpleListSort.Inequality(Argotic.Extensions.Core.SimpleListSort, Argotic.Extensions.Core.SimpleListSort)
  type: Operator
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: op_Inequality
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 206
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nDetermines if operands are not equal.\n"
  example: []
  syntax:
    content: public static bool operator !=(SimpleListSort first, SimpleListSort second)
    parameters:
    - id: first
      type: Argotic.Extensions.Core.SimpleListSort
      description: Operand to be compared.
    - id: second
      type: Argotic.Extensions.Core.SimpleListSort
      description: Operand to compare to.
    return:
      type: System.Boolean
      description: <strong>false</strong> if its operands are equal, otherwise; <strong>true</strong>.
    content.vb: Public Shared Operator <>(first As SimpleListSort, second As SimpleListSort) As Boolean
  overload: Argotic.Extensions.Core.SimpleListSort.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Argotic.Extensions.Core.SimpleListSort.op_LessThan(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.op_LessThan(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  id: op_LessThan(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: LessThan(SimpleListSort, SimpleListSort)
  nameWithType: SimpleListSort.LessThan(SimpleListSort, SimpleListSort)
  fullName: Argotic.Extensions.Core.SimpleListSort.LessThan(Argotic.Extensions.Core.SimpleListSort, Argotic.Extensions.Core.SimpleListSort)
  type: Operator
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: op_LessThan
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 217
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nDetermines if first operand is less than second operand.\n"
  example: []
  syntax:
    content: public static bool operator <(SimpleListSort first, SimpleListSort second)
    parameters:
    - id: first
      type: Argotic.Extensions.Core.SimpleListSort
      description: Operand to be compared.
    - id: second
      type: Argotic.Extensions.Core.SimpleListSort
      description: Operand to compare to.
    return:
      type: System.Boolean
      description: <strong>true</strong> if the first operand is less than the second, otherwise; <strong>false</strong>.
    content.vb: Public Shared Operator <(first As SimpleListSort, second As SimpleListSort) As Boolean
  overload: Argotic.Extensions.Core.SimpleListSort.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Argotic.Extensions.Core.SimpleListSort.op_GreaterThan(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.op_GreaterThan(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  id: op_GreaterThan(Argotic.Extensions.Core.SimpleListSort,Argotic.Extensions.Core.SimpleListSort)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: GreaterThan(SimpleListSort, SimpleListSort)
  nameWithType: SimpleListSort.GreaterThan(SimpleListSort, SimpleListSort)
  fullName: Argotic.Extensions.Core.SimpleListSort.GreaterThan(Argotic.Extensions.Core.SimpleListSort, Argotic.Extensions.Core.SimpleListSort)
  type: Operator
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: op_GreaterThan
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 237
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nDetermines if first operand is greater than second operand.\n"
  example: []
  syntax:
    content: public static bool operator>(SimpleListSort first, SimpleListSort second)
    parameters:
    - id: first
      type: Argotic.Extensions.Core.SimpleListSort
      description: Operand to be compared.
    - id: second
      type: Argotic.Extensions.Core.SimpleListSort
      description: Operand to compare to.
    return:
      type: System.Boolean
      description: <strong>true</strong> if the first operand is greater than the second, otherwise; <strong>false</strong>.
    content.vb: Public Shared Operator>(first As SimpleListSort, second As SimpleListSort) As Boolean
  overload: Argotic.Extensions.Core.SimpleListSort.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Argotic.Extensions.Core.SimpleListSort.DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
  id: DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: DataTypeAsString(SimpleListDataType)
  nameWithType: SimpleListSort.DataTypeAsString(SimpleListDataType)
  fullName: Argotic.Extensions.Core.SimpleListSort.DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: DataTypeAsString
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 256
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nReturns the data type identifier for the supplied <xref href=\"Argotic.Extensions.Core.SimpleListDataType\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static string DataTypeAsString(SimpleListDataType type)
    parameters:
    - id: type
      type: Argotic.Extensions.Core.SimpleListDataType
      description: The <xref href="Argotic.Extensions.Core.SimpleListDataType" data-throw-if-not-resolved="false"></xref> to get the data type identifier for.
    return:
      type: System.String
      description: The data type identifier for the supplied <code data-dev-comment-type="paramref" class="paramref">type</code>, otherwise returns an empty string.
    content.vb: Public Shared Function DataTypeAsString(type As SimpleListDataType) As String
  overload: Argotic.Extensions.Core.SimpleListSort.DataTypeAsString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Argotic.Extensions.Core.SimpleListSort.DataTypeByName(System.String)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.DataTypeByName(System.String)
  id: DataTypeByName(System.String)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: DataTypeByName(String)
  nameWithType: SimpleListSort.DataTypeByName(String)
  fullName: Argotic.Extensions.Core.SimpleListSort.DataTypeByName(System.String)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: DataTypeByName
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 291
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nReturns the <xref href=\"Argotic.Extensions.Core.SimpleListDataType\" data-throw-if-not-resolved=\"false\"></xref> enumeration value that corresponds to the specified data type name.\n"
  remarks: This method disregards case of specified data type name.
  example: []
  syntax:
    content: public static SimpleListDataType DataTypeByName(string name)
    parameters:
    - id: name
      type: System.String
      description: The name of the data type.
    return:
      type: Argotic.Extensions.Core.SimpleListDataType
      description: A <xref href="Argotic.Extensions.Core.SimpleListDataType" data-throw-if-not-resolved="false"></xref> enumeration value that corresponds to the specified string, otherwise returns <strong>SimpleListDataType.None</strong>.
    content.vb: Public Shared Function DataTypeByName(name As String) As SimpleListDataType
  overload: Argotic.Extensions.Core.SimpleListSort.DataTypeByName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref" class="paramref">name</code> is a null reference (Nothing in Visual Basic).
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref" class="paramref">name</code> is an empty string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Argotic.Extensions.Core.SimpleListSort.Load(System.Xml.XPath.XPathNavigator)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.Load(System.Xml.XPath.XPathNavigator)
  id: Load(System.Xml.XPath.XPathNavigator)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: Load(XPathNavigator)
  nameWithType: SimpleListSort.Load(XPathNavigator)
  fullName: Argotic.Extensions.Core.SimpleListSort.Load(System.Xml.XPath.XPathNavigator)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: Load
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 327
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nLoads this <xref href=\"Argotic.Extensions.Core.SimpleListSort\" data-throw-if-not-resolved=\"false\"></xref> using the supplied <xref href=\"System.Xml.XPath.XPathNavigator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis method expects the supplied <code data-dev-comment-type=\"paramref\" class=\"paramref\">source</code> to be positioned on the XML element that represents a <xref href=\"Argotic.Extensions.Core.SimpleListSort\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Load(XPathNavigator source)
    parameters:
    - id: source
      type: System.Xml.XPath.XPathNavigator
      description: The <xref href="System.Xml.XPath.XPathNavigator" data-throw-if-not-resolved="false"></xref> to extract information from.
    return:
      type: System.Boolean
      description: <strong>true</strong> if the <xref href="Argotic.Extensions.Core.SimpleListSort" data-throw-if-not-resolved="false"></xref> was initialized using the supplied <code data-dev-comment-type="paramref" class="paramref">source</code>, otherwise <strong>false</strong>.
    content.vb: Public Function Load(source As XPathNavigator) As Boolean
  overload: Argotic.Extensions.Core.SimpleListSort.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref" class="paramref">source</code> is a null reference (Nothing in Visual Basic).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.WriteTo(System.Xml.XmlWriter)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: WriteTo(XmlWriter)
  nameWithType: SimpleListSort.WriteTo(XmlWriter)
  fullName: Argotic.Extensions.Core.SimpleListSort.WriteTo(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: WriteTo
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 394
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nSaves the current <xref href=\"Argotic.Extensions.Core.SimpleListSort\" data-throw-if-not-resolved=\"false\"></xref> to the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void WriteTo(XmlWriter writer)
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: The <xref href="System.Xml.XmlWriter" data-throw-if-not-resolved="false"></xref> to which you want to save.
    content.vb: Public Sub WriteTo(writer As XmlWriter)
  overload: Argotic.Extensions.Core.SimpleListSort.WriteTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref" class="paramref">writer</code> is a null reference (Nothing in Visual Basic).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.ToString
  commentId: M:Argotic.Extensions.Core.SimpleListSort.ToString
  id: ToString
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SimpleListSort.ToString()
  fullName: Argotic.Extensions.Core.SimpleListSort.ToString()
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: ToString
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 435
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nReturns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"Argotic.Extensions.Core.SimpleListSort\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThis method returns the XML representation for the current instance.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the current <xref href="Argotic.Extensions.Core.SimpleListSort" data-throw-if-not-resolved="false"></xref>.
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: Argotic.Extensions.Core.SimpleListSort.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Argotic.Extensions.Core.SimpleListSort.CompareTo(System.Object)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: SimpleListSort.CompareTo(Object)
  fullName: Argotic.Extensions.Core.SimpleListSort.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: CompareTo
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 464
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nCompares the current instance with another object of the same type.\n"
  example: []
  syntax:
    content: public int CompareTo(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance.
    return:
      type: System.Int32
      description: A 32-bit signed integer that indicates the relative order of the objects being compared.
    content.vb: Public Function CompareTo(obj As Object) As Integer
  overload: Argotic.Extensions.Core.SimpleListSort.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code data-dev-comment-type="paramref" class="paramref">obj</code> is not the expected <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Argotic.Extensions.Core.SimpleListSort.Equals(System.Object)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.Equals(System.Object)
  id: Equals(System.Object)
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SimpleListSort.Equals(Object)
  fullName: Argotic.Extensions.Core.SimpleListSort.Equals(System.Object)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: Equals
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 494
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nDetermines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current instance.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to compare with the current instance.
    return:
      type: System.Boolean
      description: <strong>true</strong> if the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is equal to the current instance; otherwise, <strong>false</strong>.
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: Argotic.Extensions.Core.SimpleListSort.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Argotic.Extensions.Core.SimpleListSort.GetHashCode
  commentId: M:Argotic.Extensions.Core.SimpleListSort.GetHashCode
  id: GetHashCode
  parent: Argotic.Extensions.Core.SimpleListSort
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SimpleListSort.GetHashCode()
  fullName: Argotic.Extensions.Core.SimpleListSort.GetHashCode()
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: GetHashCode
    path: ../Solutions/Argotic.Extensions/Core/SimpleList/SimpleListSort.cs
    startLine: 508
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions.Core
  summary: "\nReturns a hash code for the current instance.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
    content.vb: Public Overrides Function GetHashCode As Integer
  overridden: System.Object.GetHashCode
  overload: Argotic.Extensions.Core.SimpleListSort.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Argotic.Extensions.Core.SimpleListSyndicationExtensionContext.Sorting
  commentId: P:Argotic.Extensions.Core.SimpleListSyndicationExtensionContext.Sorting
  isExternal: true
- uid: Argotic.Extensions.Core
  commentId: N:Argotic.Extensions.Core
  name: Argotic.Extensions.Core
  nameWithType: Argotic.Extensions.Core
  fullName: Argotic.Extensions.Core
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: true
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Argotic.Extensions.Core.SimpleListSort
  commentId: T:Argotic.Extensions.Core.SimpleListSort
  parent: Argotic.Extensions.Core
  name: SimpleListSort
  nameWithType: SimpleListSort
  fullName: Argotic.Extensions.Core.SimpleListSort
- uid: Argotic.Extensions.Core.SimpleListSort.#ctor*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.#ctor
  name: SimpleListSort
  nameWithType: SimpleListSort.SimpleListSort
  fullName: Argotic.Extensions.Core.SimpleListSort.SimpleListSort
- uid: Argotic.Extensions.Core.SimpleListDataType
  commentId: T:Argotic.Extensions.Core.SimpleListDataType
  parent: Argotic.Extensions.Core
  name: SimpleListDataType
  nameWithType: SimpleListDataType
  fullName: Argotic.Extensions.Core.SimpleListDataType
- uid: Argotic.Extensions.Core.SimpleListDataType.None
  commentId: F:Argotic.Extensions.Core.SimpleListDataType.None
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListDataType.Text
  commentId: F:Argotic.Extensions.Core.SimpleListDataType.Text
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.DataTypeAsString(Argotic.Extensions.Core.SimpleListDataType)
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.DataTypeByName(System.String)
  commentId: M:Argotic.Extensions.Core.SimpleListSort.DataTypeByName(System.String)
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.DataType*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.DataType
  name: DataType
  nameWithType: SimpleListSort.DataType
  fullName: Argotic.Extensions.Core.SimpleListSort.DataType
- uid: System.String.Empty
  commentId: F:System.String.Empty
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.Label
  commentId: P:Argotic.Extensions.Core.SimpleListSort.Label
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.Element*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.Element
  name: Element
  nameWithType: SimpleListSort.Element
  fullName: Argotic.Extensions.Core.SimpleListSort.Element
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Argotic.Extensions.Core.SimpleListSort.IsDefault
  commentId: P:Argotic.Extensions.Core.SimpleListSort.IsDefault
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.IsDefault*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.IsDefault
  name: IsDefault
  nameWithType: SimpleListSort.IsDefault
  fullName: Argotic.Extensions.Core.SimpleListSort.IsDefault
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Argotic.Extensions.Core.SimpleListSort.Element
  commentId: P:Argotic.Extensions.Core.SimpleListSort.Element
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.Label*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.Label
  name: Label
  nameWithType: SimpleListSort.Label
  fullName: Argotic.Extensions.Core.SimpleListSort.Label
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Argotic.Extensions.Core.SimpleListSort.Namespace*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.Namespace
  name: Namespace
  nameWithType: SimpleListSort.Namespace
  fullName: Argotic.Extensions.Core.SimpleListSort.Namespace
- uid: Argotic.Extensions.Core.SimpleListSort.op_Equality*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.op_Equality
  name: Equality
  nameWithType: SimpleListSort.Equality
  fullName: Argotic.Extensions.Core.SimpleListSort.Equality
- uid: Argotic.Extensions.Core.SimpleListSort.op_Inequality*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.op_Inequality
  name: Inequality
  nameWithType: SimpleListSort.Inequality
  fullName: Argotic.Extensions.Core.SimpleListSort.Inequality
- uid: Argotic.Extensions.Core.SimpleListSort.op_LessThan*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.op_LessThan
  name: LessThan
  nameWithType: SimpleListSort.LessThan
  fullName: Argotic.Extensions.Core.SimpleListSort.LessThan
- uid: Argotic.Extensions.Core.SimpleListSort.op_GreaterThan*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.op_GreaterThan
  name: GreaterThan
  nameWithType: SimpleListSort.GreaterThan
  fullName: Argotic.Extensions.Core.SimpleListSort.GreaterThan
- uid: Argotic.Extensions.Core.SimpleListSort.DataTypeAsString*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.DataTypeAsString
  name: DataTypeAsString
  nameWithType: SimpleListSort.DataTypeAsString
  fullName: Argotic.Extensions.Core.SimpleListSort.DataTypeAsString
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.DataTypeByName*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.DataTypeByName
  name: DataTypeByName
  nameWithType: SimpleListSort.DataTypeByName
  fullName: Argotic.Extensions.Core.SimpleListSort.DataTypeByName
- uid: System.Xml.XPath.XPathNavigator
  commentId: T:System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: true
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: Argotic.Extensions.Core.SimpleListSort.Load*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.Load
  name: Load
  nameWithType: SimpleListSort.Load
  fullName: Argotic.Extensions.Core.SimpleListSort.Load
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: true
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: Argotic.Extensions.Core.SimpleListSort.WriteTo*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.WriteTo
  name: WriteTo
  nameWithType: SimpleListSort.WriteTo
  fullName: Argotic.Extensions.Core.SimpleListSort.WriteTo
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: true
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Argotic.Extensions.Core.SimpleListSort.ToString*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.ToString
  name: ToString
  nameWithType: SimpleListSort.ToString
  fullName: Argotic.Extensions.Core.SimpleListSort.ToString
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  isExternal: true
- uid: Argotic.Extensions.Core.SimpleListSort.CompareTo*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.CompareTo
  name: CompareTo
  nameWithType: SimpleListSort.CompareTo
  fullName: Argotic.Extensions.Core.SimpleListSort.CompareTo
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Argotic.Extensions.Core.SimpleListSort.Equals*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.Equals
  name: Equals
  nameWithType: SimpleListSort.Equals
  fullName: Argotic.Extensions.Core.SimpleListSort.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Argotic.Extensions.Core.SimpleListSort.GetHashCode*
  commentId: Overload:Argotic.Extensions.Core.SimpleListSort.GetHashCode
  name: GetHashCode
  nameWithType: SimpleListSort.GetHashCode
  fullName: Argotic.Extensions.Core.SimpleListSort.GetHashCode
