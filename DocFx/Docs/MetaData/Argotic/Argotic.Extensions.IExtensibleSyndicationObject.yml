### YamlMime:ManagedReference
items:
- uid: Argotic.Extensions.IExtensibleSyndicationObject
  commentId: T:Argotic.Extensions.IExtensibleSyndicationObject
  id: IExtensibleSyndicationObject
  parent: Argotic.Extensions
  children:
  - Argotic.Extensions.IExtensibleSyndicationObject.AddExtension(Argotic.Extensions.ISyndicationExtension)
  - Argotic.Extensions.IExtensibleSyndicationObject.Extensions
  - Argotic.Extensions.IExtensibleSyndicationObject.FindExtension(System.Predicate{Argotic.Extensions.ISyndicationExtension})
  - Argotic.Extensions.IExtensibleSyndicationObject.HasExtensions
  - Argotic.Extensions.IExtensibleSyndicationObject.RemoveExtension(Argotic.Extensions.ISyndicationExtension)
  langs:
  - csharp
  - vb
  name: IExtensibleSyndicationObject
  nameWithType: IExtensibleSyndicationObject
  fullName: Argotic.Extensions.IExtensibleSyndicationObject
  type: Interface
  source:
    remote:
      path: Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: IExtensibleSyndicationObject
    path: ../Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
    startLine: 9
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions
  summary: "\nDefines generalized extension properties, methods, indexers and events that a value type or class\nimplements to create a type-specific implementation of extension properties, methods, indexers and events.\n"
  example: []
  syntax:
    content: public interface IExtensibleSyndicationObject
    content.vb: Public Interface IExtensibleSyndicationObject
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Argotic.Extensions.IExtensibleSyndicationObject.Extensions
  commentId: P:Argotic.Extensions.IExtensibleSyndicationObject.Extensions
  id: Extensions
  parent: Argotic.Extensions.IExtensibleSyndicationObject
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: IExtensibleSyndicationObject.Extensions
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.Extensions
  type: Property
  source:
    remote:
      path: Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: Extensions
    path: ../Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
    startLine: 17
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions
  summary: "\nGets or sets the syndication extensions applied to the syndication entity.\n"
  example: []
  syntax:
    content: IEnumerable<ISyndicationExtension> Extensions { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Argotic.Extensions.ISyndicationExtension}
      description: A <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref> collection of <xref href="Argotic.Extensions.ISyndicationExtension" data-throw-if-not-resolved="false"></xref> objects that represent syndication extensions applied to the syndication entity.
    content.vb: Property Extensions As IEnumerable(Of ISyndicationExtension)
  overload: Argotic.Extensions.IExtensibleSyndicationObject.Extensions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref" class="paramref">value</code> is a null reference (Nothing in Visual Basic).
  seealso:
  - linkId: Argotic.Extensions.SyndicationExtension
    commentId: T:Argotic.Extensions.SyndicationExtension
  modifiers.csharp:
  - get
  - set
- uid: Argotic.Extensions.IExtensibleSyndicationObject.HasExtensions
  commentId: P:Argotic.Extensions.IExtensibleSyndicationObject.HasExtensions
  id: HasExtensions
  parent: Argotic.Extensions.IExtensibleSyndicationObject
  langs:
  - csharp
  - vb
  name: HasExtensions
  nameWithType: IExtensibleSyndicationObject.HasExtensions
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.HasExtensions
  type: Property
  source:
    remote:
      path: Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: HasExtensions
    path: ../Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
    startLine: 27
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions
  summary: "\nGets a value indicating whether gets a value indicating if the syndication entity has one or more syndication extensions applied to it.\n"
  example: []
  syntax:
    content: bool HasExtensions { get; }
    parameters: []
    return:
      type: System.Boolean
      description: <strong>true</strong> if the <xref href="Argotic.Extensions.IExtensibleSyndicationObject.Extensions" data-throw-if-not-resolved="false"></xref> collection contains one or more <xref href="Argotic.Extensions.ISyndicationExtension" data-throw-if-not-resolved="false"></xref> objects, otherwise returns <strong>false</strong>.
    content.vb: ReadOnly Property HasExtensions As Boolean
  overload: Argotic.Extensions.IExtensibleSyndicationObject.HasExtensions*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Argotic.Extensions.IExtensibleSyndicationObject.AddExtension(Argotic.Extensions.ISyndicationExtension)
  commentId: M:Argotic.Extensions.IExtensibleSyndicationObject.AddExtension(Argotic.Extensions.ISyndicationExtension)
  id: AddExtension(Argotic.Extensions.ISyndicationExtension)
  parent: Argotic.Extensions.IExtensibleSyndicationObject
  langs:
  - csharp
  - vb
  name: AddExtension(ISyndicationExtension)
  nameWithType: IExtensibleSyndicationObject.AddExtension(ISyndicationExtension)
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.AddExtension(Argotic.Extensions.ISyndicationExtension)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: AddExtension
    path: ../Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
    startLine: 38
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions
  summary: "\nAdds the supplied <xref href=\"Argotic.Extensions.ISyndicationExtension\" data-throw-if-not-resolved=\"false\"></xref> to the current instance&apos;s <xref href=\"Argotic.Extensions.IExtensibleSyndicationObject.Extensions\" data-throw-if-not-resolved=\"false\"></xref> collection.\n"
  example: []
  syntax:
    content: bool AddExtension(ISyndicationExtension extension)
    parameters:
    - id: extension
      type: Argotic.Extensions.ISyndicationExtension
      description: The <xref href="Argotic.Extensions.ISyndicationExtension" data-throw-if-not-resolved="false"></xref> to be added.
    return:
      type: System.Boolean
      description: <strong>true</strong> if the <xref href="Argotic.Extensions.ISyndicationExtension" data-throw-if-not-resolved="false"></xref> was added to the <xref href="Argotic.Extensions.IExtensibleSyndicationObject.Extensions" data-throw-if-not-resolved="false"></xref> collection, otherwise <strong>false</strong>.
    content.vb: Function AddExtension(extension As ISyndicationExtension) As Boolean
  overload: Argotic.Extensions.IExtensibleSyndicationObject.AddExtension*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref" class="paramref">extension</code> is a null reference (Nothing in Visual Basic).
- uid: Argotic.Extensions.IExtensibleSyndicationObject.FindExtension(System.Predicate{Argotic.Extensions.ISyndicationExtension})
  commentId: M:Argotic.Extensions.IExtensibleSyndicationObject.FindExtension(System.Predicate{Argotic.Extensions.ISyndicationExtension})
  id: FindExtension(System.Predicate{Argotic.Extensions.ISyndicationExtension})
  parent: Argotic.Extensions.IExtensibleSyndicationObject
  langs:
  - csharp
  - vb
  name: FindExtension(Predicate<ISyndicationExtension>)
  nameWithType: IExtensibleSyndicationObject.FindExtension(Predicate<ISyndicationExtension>)
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.FindExtension(System.Predicate<Argotic.Extensions.ISyndicationExtension>)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: FindExtension
    path: ../Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
    startLine: 53
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions
  summary: "\nSearches for a syndication extension that matches the conditions defined by the specified predicate, and returns the first occurrence within the <xref href=\"Argotic.Extensions.IExtensibleSyndicationObject.Extensions\" data-throw-if-not-resolved=\"false\"></xref> collection.\n"
  remarks: "\nThe <xref href=\"System.Predicate%601\" data-throw-if-not-resolved=\"false\"></xref> is a delegate to a method that returns <strong>true</strong> if the object passed to it matches the conditions defined in the delegate.\nThe elements of the current <xref href=\"Argotic.Extensions.IExtensibleSyndicationObject.Extensions\" data-throw-if-not-resolved=\"false\"></xref> are individually passed to the <xref href=\"System.Predicate%601\" data-throw-if-not-resolved=\"false\"></xref> delegate, moving forward in\nthe <xref href=\"Argotic.Extensions.IExtensibleSyndicationObject.Extensions\" data-throw-if-not-resolved=\"false\"></xref>, starting with the first element and ending with the last element. Processing is stopped when a match is found.\n"
  example: []
  syntax:
    content: ISyndicationExtension FindExtension(Predicate<ISyndicationExtension> match)
    parameters:
    - id: match
      type: System.Predicate{Argotic.Extensions.ISyndicationExtension}
      description: The <xref href="System.Predicate%601" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the <xref href="Argotic.Extensions.ISyndicationExtension" data-throw-if-not-resolved="false"></xref> to search for.
    return:
      type: Argotic.Extensions.ISyndicationExtension
      description: "\nThe first syndication extension that matches the conditions defined by the specified predicate, if found; otherwise, the default value for <xref href=\"Argotic.Extensions.ISyndicationExtension\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    content.vb: Function FindExtension(match As Predicate(Of ISyndicationExtension)) As ISyndicationExtension
  overload: Argotic.Extensions.IExtensibleSyndicationObject.FindExtension*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref" class="paramref">match</code> is a null reference (Nothing in Visual Basic).
  nameWithType.vb: IExtensibleSyndicationObject.FindExtension(Predicate(Of ISyndicationExtension))
  fullName.vb: Argotic.Extensions.IExtensibleSyndicationObject.FindExtension(System.Predicate(Of Argotic.Extensions.ISyndicationExtension))
  name.vb: FindExtension(Predicate(Of ISyndicationExtension))
- uid: Argotic.Extensions.IExtensibleSyndicationObject.RemoveExtension(Argotic.Extensions.ISyndicationExtension)
  commentId: M:Argotic.Extensions.IExtensibleSyndicationObject.RemoveExtension(Argotic.Extensions.ISyndicationExtension)
  id: RemoveExtension(Argotic.Extensions.ISyndicationExtension)
  parent: Argotic.Extensions.IExtensibleSyndicationObject
  langs:
  - csharp
  - vb
  name: RemoveExtension(ISyndicationExtension)
  nameWithType: IExtensibleSyndicationObject.RemoveExtension(ISyndicationExtension)
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.RemoveExtension(Argotic.Extensions.ISyndicationExtension)
  type: Method
  source:
    remote:
      path: Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
      branch: feature/DocFx
      repo: https://github.com/endjin/Argotic.git
    id: RemoveExtension
    path: ../Solutions/Argotic.Extensions/IExtensibleSyndicationObject.cs
    startLine: 61
  assemblies:
  - Argotic.Extensions
  namespace: Argotic.Extensions
  summary: "\nRemoves the supplied <xref href=\"Argotic.Extensions.ISyndicationExtension\" data-throw-if-not-resolved=\"false\"></xref> from the current instance&apos;s <xref href=\"Argotic.Extensions.IExtensibleSyndicationObject.Extensions\" data-throw-if-not-resolved=\"false\"></xref> collection.\n"
  example: []
  syntax:
    content: bool RemoveExtension(ISyndicationExtension extension)
    parameters:
    - id: extension
      type: Argotic.Extensions.ISyndicationExtension
      description: The <xref href="Argotic.Extensions.ISyndicationExtension" data-throw-if-not-resolved="false"></xref> to be removed.
    return:
      type: System.Boolean
      description: <strong>true</strong> if the <xref href="Argotic.Extensions.ISyndicationExtension" data-throw-if-not-resolved="false"></xref> was removed from the <xref href="Argotic.Extensions.IExtensibleSyndicationObject.Extensions" data-throw-if-not-resolved="false"></xref> collection, otherwise <strong>false</strong>.
    content.vb: Function RemoveExtension(extension As ISyndicationExtension) As Boolean
  overload: Argotic.Extensions.IExtensibleSyndicationObject.RemoveExtension*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code data-dev-comment-type="paramref" class="paramref">extension</code> is a null reference (Nothing in Visual Basic).
references:
- uid: Argotic.Extensions
  commentId: N:Argotic.Extensions
  name: Argotic.Extensions
  nameWithType: Argotic.Extensions
  fullName: Argotic.Extensions
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Argotic.Extensions.ISyndicationExtension
  commentId: T:Argotic.Extensions.ISyndicationExtension
  parent: Argotic.Extensions
  name: ISyndicationExtension
  nameWithType: ISyndicationExtension
  fullName: Argotic.Extensions.ISyndicationExtension
- uid: Argotic.Extensions.SyndicationExtension
  commentId: T:Argotic.Extensions.SyndicationExtension
  parent: Argotic.Extensions
  name: SyndicationExtension
  nameWithType: SyndicationExtension
  fullName: Argotic.Extensions.SyndicationExtension
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: true
- uid: Argotic.Extensions.IExtensibleSyndicationObject.Extensions*
  commentId: Overload:Argotic.Extensions.IExtensibleSyndicationObject.Extensions
  name: Extensions
  nameWithType: IExtensibleSyndicationObject.Extensions
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.Extensions
- uid: System.Collections.Generic.IEnumerable{Argotic.Extensions.ISyndicationExtension}
  commentId: T:System.Collections.Generic.IEnumerable{Argotic.Extensions.ISyndicationExtension}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ISyndicationExtension>
  nameWithType: IEnumerable<ISyndicationExtension>
  fullName: System.Collections.Generic.IEnumerable<Argotic.Extensions.ISyndicationExtension>
  nameWithType.vb: IEnumerable(Of ISyndicationExtension)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Argotic.Extensions.ISyndicationExtension)
  name.vb: IEnumerable(Of ISyndicationExtension)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Argotic.Extensions.ISyndicationExtension
    name: ISyndicationExtension
    nameWithType: ISyndicationExtension
    fullName: Argotic.Extensions.ISyndicationExtension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Argotic.Extensions.ISyndicationExtension
    name: ISyndicationExtension
    nameWithType: ISyndicationExtension
    fullName: Argotic.Extensions.ISyndicationExtension
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Argotic.Extensions.IExtensibleSyndicationObject.Extensions
  commentId: P:Argotic.Extensions.IExtensibleSyndicationObject.Extensions
  parent: Argotic.Extensions.IExtensibleSyndicationObject
  name: Extensions
  nameWithType: IExtensibleSyndicationObject.Extensions
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.Extensions
- uid: Argotic.Extensions.IExtensibleSyndicationObject.HasExtensions*
  commentId: Overload:Argotic.Extensions.IExtensibleSyndicationObject.HasExtensions
  name: HasExtensions
  nameWithType: IExtensibleSyndicationObject.HasExtensions
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.HasExtensions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Argotic.Extensions.IExtensibleSyndicationObject
  commentId: T:Argotic.Extensions.IExtensibleSyndicationObject
  parent: Argotic.Extensions
  name: IExtensibleSyndicationObject
  nameWithType: IExtensibleSyndicationObject
  fullName: Argotic.Extensions.IExtensibleSyndicationObject
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Argotic.Extensions.IExtensibleSyndicationObject.AddExtension*
  commentId: Overload:Argotic.Extensions.IExtensibleSyndicationObject.AddExtension
  name: AddExtension
  nameWithType: IExtensibleSyndicationObject.AddExtension
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.AddExtension
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: true
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Argotic.Extensions.IExtensibleSyndicationObject.FindExtension*
  commentId: Overload:Argotic.Extensions.IExtensibleSyndicationObject.FindExtension
  name: FindExtension
  nameWithType: IExtensibleSyndicationObject.FindExtension
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.FindExtension
- uid: System.Predicate{Argotic.Extensions.ISyndicationExtension}
  commentId: T:System.Predicate{Argotic.Extensions.ISyndicationExtension}
  parent: System
  definition: System.Predicate`1
  name: Predicate<ISyndicationExtension>
  nameWithType: Predicate<ISyndicationExtension>
  fullName: System.Predicate<Argotic.Extensions.ISyndicationExtension>
  nameWithType.vb: Predicate(Of ISyndicationExtension)
  fullName.vb: System.Predicate(Of Argotic.Extensions.ISyndicationExtension)
  name.vb: Predicate(Of ISyndicationExtension)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Argotic.Extensions.ISyndicationExtension
    name: ISyndicationExtension
    nameWithType: ISyndicationExtension
    fullName: Argotic.Extensions.ISyndicationExtension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Argotic.Extensions.ISyndicationExtension
    name: ISyndicationExtension
    nameWithType: ISyndicationExtension
    fullName: Argotic.Extensions.ISyndicationExtension
  - name: )
    nameWithType: )
    fullName: )
- uid: Argotic.Extensions.IExtensibleSyndicationObject.RemoveExtension*
  commentId: Overload:Argotic.Extensions.IExtensibleSyndicationObject.RemoveExtension
  name: RemoveExtension
  nameWithType: IExtensibleSyndicationObject.RemoveExtension
  fullName: Argotic.Extensions.IExtensibleSyndicationObject.RemoveExtension
